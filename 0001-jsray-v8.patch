commit 448aa40ef03a61794f8b88575e86cf949f5b597a
Author: Xinzhe Wang <xzwang21@cse.cuhk.edu.hk>
Date:   Wed Sep 21 19:30:20 2022 +0800

    jsray

diff --git a/BUILD.bazel b/BUILD.bazel
index 23bce0f4bd..1a697fd352 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -941,6 +941,8 @@ filegroup(
         "src/api/api-macros-undef.h",
         "src/api/api-natives.cc",
         "src/api/api-natives.h",
+        "src/api/api-md5.cc",
+        "src/api/api-md5.h",
         "src/api/api.cc",
         "src/api/api.h",
         "src/ast/ast-function-literal-id-reindexer.cc",
diff --git a/BUILD.gn b/BUILD.gn
index f491f2a4e6..52044eed98 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -3953,6 +3953,7 @@ v8_source_set("v8_base_without_compiler") {
     ### gcmole(all) ###
     "src/api/api-arguments.cc",
     "src/api/api-natives.cc",
+    "src/api/api-md5.cc",
     "src/api/api.cc",
     "src/ast/ast-function-literal-id-reindexer.cc",
     "src/ast/ast-value-factory.cc",
diff --git a/include/v8-debug.h b/include/v8-debug.h
index a13ae3f6d6..92af6db750 100644
--- a/include/v8-debug.h
+++ b/include/v8-debug.h
@@ -6,6 +6,7 @@
 #define INCLUDE_V8_DEBUG_H_
 
 #include <stdint.h>
+#include <map>
 
 #include "v8-local-handle.h"  // NOLINT(build/include_directory)
 #include "v8config.h"         // NOLINT(build/include_directory)
@@ -146,6 +147,15 @@ class V8_EXPORT StackTrace {
       Isolate* isolate, int frame_limit, StackTraceOptions options = kDetailed);
 };
 
+class V8_EXPORT ScriptPool {
+ public:
+  static void AddScript(const char *script, int id);
+  static int GetScript(const char *script);
+ private:
+  static std::string MD5toString(uint8_t str[16]);
+  static std::map<std::string, int>* pool;
+};
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_DEBUG_H_
diff --git a/src/api/api-md5.cc b/src/api/api-md5.cc
new file mode 100644
index 0000000000..41ff2df3b2
--- /dev/null
+++ b/src/api/api-md5.cc
@@ -0,0 +1,210 @@
+/*
+ * Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm
+ * and modified slightly to be functionally identical but condensed into control structures.
+ */
+
+#include "api-md5.h"
+
+namespace v8 {
+namespace internal {
+/*
+ * Constants defined by the MD5 algorithm
+ */
+#define A 0x67452301
+#define B 0xefcdab89
+#define C 0x98badcfe
+#define D 0x10325476
+
+static uint32_t S[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
+                       5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
+                       4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
+                       6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};
+
+static uint32_t K[] = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
+                       0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
+                       0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
+                       0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
+                       0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
+                       0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
+                       0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
+                       0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
+                       0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
+                       0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
+                       0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
+                       0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
+                       0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
+                       0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
+                       0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
+                       0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
+
+/*
+ * Padding used to make the size (in bits) of the input congruent to 448 mod 512
+ */
+static uint8_t PADDING[] = {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+
+/*
+ * Bit-manipulation functions defined by the MD5 algorithm
+ */
+#define F(X, Y, Z) ((X & Y) | (~X & Z))
+#define G(X, Y, Z) ((X & Z) | (Y & ~Z))
+#define H(X, Y, Z) (X ^ Y ^ Z)
+#define I(X, Y, Z) (Y ^ (X | ~Z))
+
+/*
+ * Rotates a 32-bit word left by n bits
+ */
+uint32_t rotateLeft(uint32_t x, uint32_t n){
+    return (x << n) | (x >> (32 - n));
+}
+
+
+/*
+ * Initialize a context
+ */
+void md5Init(MD5Context *ctx){
+    ctx->size = (uint64_t)0;
+
+    ctx->buffer[0] = (uint32_t)A;
+    ctx->buffer[1] = (uint32_t)B;
+    ctx->buffer[2] = (uint32_t)C;
+    ctx->buffer[3] = (uint32_t)D;
+}
+
+/*
+ * Add some amount of input to the context
+ *
+ * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
+ * and save the result in the buffer. Also updates the overall size.
+ */
+void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
+    uint32_t input[16];
+    unsigned int offset = ctx->size % 64;
+    ctx->size += (uint64_t)input_len;
+
+    // Copy each byte in input_buffer into the next space in our context input
+    for(unsigned int i = 0; i < input_len; ++i){
+        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
+
+        // If we've filled our context input, copy it into our local array input
+        // then reset the offset to 0 and fill in a new buffer.
+        // Every time we fill out a chunk, we run it through the algorithm
+        // to enable some back and forth between cpu and i/o
+        if(offset % 64 == 0){
+            for(unsigned int j = 0; j < 16; ++j){
+                // Convert to little-endian
+                // The local variable `input` our 512-bit chunk separated into 32-bit words
+                // we can use in calculations
+                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
+                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
+                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
+                           (uint32_t)(ctx->input[(j * 4)]);
+            }
+            md5Step(ctx->buffer, input);
+            offset = 0;
+        }
+    }
+}
+
+/*
+ * Pad the current input to get to 448 bytes, append the size in bits to the very end,
+ * and save the result of the final iteration into digest.
+ */
+void md5Finalize(MD5Context *ctx){
+    uint32_t input[16];
+    unsigned int offset = ctx->size % 64;
+    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
+
+    // Fill in the padding and undo the changes to size that resulted from the update
+    md5Update(ctx, PADDING, padding_length);
+    ctx->size -= (uint64_t)padding_length;
+
+    // Do a final update (internal to this function)
+    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
+    for(unsigned int j = 0; j < 14; ++j){
+        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
+                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
+                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
+                   (uint32_t)(ctx->input[(j * 4)]);
+    }
+    input[14] = (uint32_t)(ctx->size * 8);
+    input[15] = (uint32_t)((ctx->size * 8) >> 32);
+
+    md5Step(ctx->buffer, input);
+
+    // Move the result into digest (convert from little-endian)
+    for(unsigned int i = 0; i < 4; ++i){
+        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
+        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
+        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
+        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
+    }
+}
+
+/*
+ * Step on 512 bits of input with the main MD5 algorithm.
+ */
+void md5Step(uint32_t *buffer, uint32_t *input){
+    uint32_t AA = buffer[0];
+    uint32_t BB = buffer[1];
+    uint32_t CC = buffer[2];
+    uint32_t DD = buffer[3];
+
+    uint32_t E;
+
+    unsigned int j;
+
+    for(unsigned int i = 0; i < 64; ++i){
+        switch(i / 16){
+            case 0:
+                E = F(BB, CC, DD);
+                j = i;
+                break;
+            case 1:
+                E = G(BB, CC, DD);
+                j = ((i * 5) + 1) % 16;
+                break;
+            case 2:
+                E = H(BB, CC, DD);
+                j = ((i * 3) + 5) % 16;
+                break;
+            default:
+                E = I(BB, CC, DD);
+                j = (i * 7) % 16;
+                break;
+        }
+
+        uint32_t temp = DD;
+        DD = CC;
+        CC = BB;
+        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
+        AA = temp;
+    }
+
+    buffer[0] += AA;
+    buffer[1] += BB;
+    buffer[2] += CC;
+    buffer[3] += DD;
+}
+
+/*
+ * Functions that run the algorithm on the provided input and put the digest into result.
+ * result should be able to store 16 bytes.
+ */
+void md5String(const char *input, uint8_t *result){
+    MD5Context ctx;
+    md5Init(&ctx);
+    md5Update(&ctx, (uint8_t *)input, strlen(input));
+    md5Finalize(&ctx);
+
+    memcpy(result, ctx.digest, 16);
+}
+
+}
+}
\ No newline at end of file
diff --git a/src/api/api-md5.h b/src/api/api-md5.h
new file mode 100644
index 0000000000..163b52f699
--- /dev/null
+++ b/src/api/api-md5.h
@@ -0,0 +1,29 @@
+#ifndef V8_API_API_MD5_H_
+#define V8_API_API_MD5_H_
+
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include <stdlib.h>
+
+namespace v8 {
+namespace internal {
+
+typedef struct{
+    uint64_t size;        // Size of input in bytes
+    uint32_t buffer[4];   // Current accumulation of hash
+    uint8_t input[64];    // Input to be used in the next step
+    uint8_t digest[16];   // Result of algorithm
+}MD5Context;
+
+void md5Init(MD5Context *ctx);
+void md5Update(MD5Context *ctx, uint8_t *input, size_t input_len);
+void md5Finalize(MD5Context *ctx);
+void md5Step(uint32_t *buffer, uint32_t *input);
+
+void md5String(const char *input, uint8_t *result);
+
+}
+}
+
+#endif
\ No newline at end of file
diff --git a/src/api/api.cc b/src/api/api.cc
index f79d0482ed..a890b6628e 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -11,6 +11,7 @@
 #include <string>
 #include <utility>  // For move
 #include <vector>
+#include <fstream>
 
 #include "include/v8-callbacks.h"
 #include "include/v8-cppgc.h"
@@ -25,6 +26,7 @@
 #include "include/v8-unwinder-state.h"
 #include "include/v8-util.h"
 #include "include/v8-wasm.h"
+#include "src/api/api-md5.h"
 #include "src/api/api-inl.h"
 #include "src/api/api-natives.h"
 #include "src/base/functional.h"
@@ -3202,6 +3204,44 @@ bool StackFrame::IsUserJavaScript() const {
   return Utils::OpenHandle(this)->IsUserJavaScript();
 }
 
+std::map<std::string, int>* ScriptPool::pool = new std::map<std::string, int>{};
+
+void ScriptPool::AddScript(const char *script, int id) {
+  uint8_t md5[16];
+  internal::md5String(script, md5);
+  auto md5str = MD5toString(md5);
+  std::ofstream sf_out;
+  sf_out.open("script.log", std::ios::app);
+  sf_out << md5str.c_str()<<","<<id<<std::endl;
+  sf_out.flush();
+  sf_out.close();
+
+  sf_out.open((std::string("script/")+md5str).c_str(), std::ios::out);
+  sf_out << script;
+  sf_out.close();
+  pool->insert(std::make_pair(md5str,id));
+}
+
+std::string ScriptPool::MD5toString(uint8_t str[16]){
+  std::string ret;
+  for(unsigned int i = 0; i < 16; ++i) {
+    char tmp[8];
+    sprintf(tmp, "%02x", str[i]);
+    ret.append(tmp);
+  }
+  return ret;
+}
+
+int ScriptPool::GetScript(const char *script) {
+  uint8_t md5[16];
+  internal::md5String(script, md5);
+  auto iter = pool->find(MD5toString(md5));
+  if(iter != pool->end())
+    return iter->second;
+  else
+    return -1;
+}
+
 // --- J S O N ---
 
 MaybeLocal<Value> JSON::Parse(Local<Context> context,
diff --git a/src/codegen/compiler.cc b/src/codegen/compiler.cc
index 9fab1cd40f..1ae8f7162c 100644
--- a/src/codegen/compiler.cc
+++ b/src/codegen/compiler.cc
@@ -5,6 +5,7 @@
 #include "src/codegen/compiler.h"
 
 #include <algorithm>
+#include <fstream>
 #include <memory>
 
 #include "src/api/api-inl.h"
@@ -1395,6 +1396,33 @@ MaybeHandle<SharedFunctionInfo> CompileToplevel(
     CompileAllWithBaseline(isolate, finalize_unoptimized_compilation_data_list);
   }
 
+  if (script->id() >= 4) {  // ignore built-in
+    auto isolate = v8::Isolate::GetCurrent();
+    v8::Local<v8::StackTrace> st;
+    int parentID = 0;
+    int parentLine = 0;
+    st = v8::StackTrace::CurrentStackTrace(isolate, 1);
+    if (!st.IsEmpty()) {
+      if (st->GetFrameCount()) {
+        auto stackFrame = st->GetFrame(isolate, 0);
+        parentID = stackFrame->GetScriptId();
+        parentLine = stackFrame->GetLineNumber();
+      }
+    }
+
+    std::ofstream sf_out;
+    v8::ScriptPool::AddScript(String::cast(script->source()).ToCString().get(), script->id());
+    std::string srcname = "<anonymous>";
+    if (script->name().IsString())
+      srcname = String::cast(script->name()).ToCString().get();
+    sf_out.open("out.log", std::ios::app);
+    sf_out << "{\"category\":\"Script\","
+              "\"function\":\"CompileToplevel\",\"id\":"
+           << script->id() << ",\"src\":\"" << srcname << "\",\"parentID\":" << parentID
+           << ",\"parentLine\":" << parentLine << "}" << std::endl;
+    sf_out.flush();
+    sf_out.close();
+  }
   return shared_info;
 }
 
@@ -2838,7 +2866,6 @@ MaybeHandle<SharedFunctionInfo> GetSharedFunctionInfoForScriptImpl(
     ScriptCompiler::CompileOptions compile_options,
     ScriptCompiler::NoCacheReason no_cache_reason, NativesFlag natives) {
   ScriptCompileTimerScope compile_timer(isolate, no_cache_reason);
-
   if (compile_options == ScriptCompiler::kNoCompileOptions ||
       compile_options == ScriptCompiler::kEagerCompile) {
     DCHECK_NULL(cached_data);
@@ -3210,6 +3237,40 @@ Compiler::GetSharedFunctionInfoForStreamedScript(
   TRACE_EVENT0(TRACE_DISABLED_BY_DEFAULT("v8.compile"),
                "V8.StreamingFinalization.Release");
   streaming_data->Release();
+
+  Handle<SharedFunctionInfo> obj;
+  if (maybe_result.ToHandle(&obj)) {
+    if (obj->is_script()) {
+      Handle<Script> result_script(Script::cast(obj->script()), isolate);
+      if (result_script->id() >= 4) {  // ignore built-in
+        auto isolate = v8::Isolate::GetCurrent();
+        v8::Local<v8::StackTrace> st;
+        int parentID = 0;
+        int parentLine = 0;
+        st = v8::StackTrace::CurrentStackTrace(isolate, 1);
+        if (!st.IsEmpty()) {
+          if (st->GetFrameCount()) {
+            auto stackFrame = st->GetFrame(isolate, 0);
+            parentID = stackFrame->GetScriptId();
+            parentLine = stackFrame->GetLineNumber();
+          }
+        }
+
+        std::ofstream sf_out;
+        v8::ScriptPool::AddScript(source->ToCString().get(), result_script->id());
+        sf_out.open("out.log", std::ios::app);
+        sf_out
+            << "{\"category\":\"Script\","
+               "\"function\":\"GetSharedFunctionInfoForStreamedScript\",\"id\":"
+            << result_script->id() << ",\"src\":\""
+            << String::cast(result_script->name()).ToCString().get()
+            << "\",\"parentID\":" << parentID
+            << ",\"parentLine\":" << parentLine << "}" << std::endl;
+        sf_out.flush();
+        sf_out.close();
+      }
+    }
+  }
   return maybe_result;
 }
 
